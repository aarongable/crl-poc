// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CRLGeneratorClient is the client API for CRLGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRLGeneratorClient interface {
	GenerateCRL(ctx context.Context, opts ...grpc.CallOption) (CRLGenerator_GenerateCRLClient, error)
}

type cRLGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewCRLGeneratorClient(cc grpc.ClientConnInterface) CRLGeneratorClient {
	return &cRLGeneratorClient{cc}
}

func (c *cRLGeneratorClient) GenerateCRL(ctx context.Context, opts ...grpc.CallOption) (CRLGenerator_GenerateCRLClient, error) {
	stream, err := c.cc.NewStream(ctx, &CRLGenerator_ServiceDesc.Streams[0], "/hnydemo.CRLGenerator/GenerateCRL", opts...)
	if err != nil {
		return nil, err
	}
	x := &cRLGeneratorGenerateCRLClient{stream}
	return x, nil
}

type CRLGenerator_GenerateCRLClient interface {
	Send(*GenerateCRLRequest) error
	Recv() (*GenerateCRLResponse, error)
	grpc.ClientStream
}

type cRLGeneratorGenerateCRLClient struct {
	grpc.ClientStream
}

func (x *cRLGeneratorGenerateCRLClient) Send(m *GenerateCRLRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cRLGeneratorGenerateCRLClient) Recv() (*GenerateCRLResponse, error) {
	m := new(GenerateCRLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CRLGeneratorServer is the server API for CRLGenerator service.
// All implementations must embed UnimplementedCRLGeneratorServer
// for forward compatibility
type CRLGeneratorServer interface {
	GenerateCRL(CRLGenerator_GenerateCRLServer) error
	mustEmbedUnimplementedCRLGeneratorServer()
}

// UnimplementedCRLGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedCRLGeneratorServer struct {
}

func (UnimplementedCRLGeneratorServer) GenerateCRL(CRLGenerator_GenerateCRLServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateCRL not implemented")
}
func (UnimplementedCRLGeneratorServer) mustEmbedUnimplementedCRLGeneratorServer() {}

// UnsafeCRLGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRLGeneratorServer will
// result in compilation errors.
type UnsafeCRLGeneratorServer interface {
	mustEmbedUnimplementedCRLGeneratorServer()
}

func RegisterCRLGeneratorServer(s grpc.ServiceRegistrar, srv CRLGeneratorServer) {
	s.RegisterService(&CRLGenerator_ServiceDesc, srv)
}

func _CRLGenerator_GenerateCRL_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CRLGeneratorServer).GenerateCRL(&cRLGeneratorGenerateCRLServer{stream})
}

type CRLGenerator_GenerateCRLServer interface {
	Send(*GenerateCRLResponse) error
	Recv() (*GenerateCRLRequest, error)
	grpc.ServerStream
}

type cRLGeneratorGenerateCRLServer struct {
	grpc.ServerStream
}

func (x *cRLGeneratorGenerateCRLServer) Send(m *GenerateCRLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cRLGeneratorGenerateCRLServer) Recv() (*GenerateCRLRequest, error) {
	m := new(GenerateCRLRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CRLGenerator_ServiceDesc is the grpc.ServiceDesc for CRLGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRLGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hnydemo.CRLGenerator",
	HandlerType: (*CRLGeneratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateCRL",
			Handler:       _CRLGenerator_GenerateCRL_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "crl.proto",
}
